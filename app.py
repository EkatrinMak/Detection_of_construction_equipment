import streamlit as st
from PIL import Image
import tempfile
import os
from ultralytics import YOLO, RTDETR
import cv2
import sqlite3
import datetime
import base64
from io import BytesIO

# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å
st.set_page_config(page_title="–î–µ—Ç–µ–∫—Ü–∏—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–æ–π —Ç–µ—Ö–Ω–∏–∫–∏", layout="centered")
st.title("üöß –î–µ—Ç–µ–∫—Ü–∏—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–æ–π —Ç–µ—Ö–Ω–∏–∫–∏")

import requests
import os

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ —Å Google Drive
def download_file_from_google_drive(file_id, destination):
    URL = "https://drive.google.com/uc?id={}&export=download".format(file_id)
    session = requests.Session()
    response = session.get(URL, stream=True)
    token = None

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±–æ–ª—å—à–æ–≥–æ —Ñ–∞–π–ª–∞
    for key, value in response.cookies.items():
        if key.startswith('download_warning'):
            token = value
            break

    if token:
        params = {'id': file_id, 'confirm': token}
        response = session.get(URL, params=params, stream=True)

    # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    CHUNK_SIZE = 32768
    with open(destination, "wb") as f:
        for chunk in response.iter_content(CHUNK_SIZE):
            if chunk:
                f.write(chunk)

# ID —Ñ–∞–π–ª–æ–≤ –∏–∑ Google Drive —Å—Å—ã–ª–æ–∫
MODEL_FILE_IDS = {
    "YOLOv11": "13dVgKfjX87HmKc1nwnQDqASOY0n0m-XQ",
    "RT-DETR": "1-qPgDJHoR5iEiFuYbiWgZs7sOFMN0yrk"
}

# –õ–æ–∫–∞–ª—å–Ω—ã–µ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º –≤–µ—Å–æ–≤
MODEL_PATHS = {
    "YOLOv11": "epoch60.pt",
    "RT-DETR": "best-24.pt",
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–µ—Å–æ–≤
for model_name, file_id in MODEL_FILE_IDS.items():
    if not os.path.exists(MODEL_PATHS[model_name]):
        print(f"–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–µ—Å–æ–≤ –¥–ª—è –º–æ–¥–µ–ª–∏ {model_name}...")
        download_file_from_google_drive(file_id, MODEL_PATHS[model_name])
        print(f"‚úÖ –í–µ—Å–∞ –¥–ª—è {model_name} —Å–∫–∞—á–∞–Ω—ã!")

@st.cache_resource
def load_model(path: str, option: str):
    if option == "RT-DETR":
        return RTDETR(path)
    else:
        return YOLO(path)

# –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ –∏ –ø–æ—Ä–æ–≥–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
model_option = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–µ—Ç–µ–∫—Ü–∏–∏", list(MODEL_PATHS.keys()))
conf_threshold = st.slider(
    "–ü–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ (confidence threshold)",
    min_value=0.0, max_value=1.0, value=0.25, step=0.05
)

# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
# –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å
# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
model = load_model(MODEL_PATHS[model_option], model_option)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î SQLite
DB_PATH = "detections.db"

def save_detection_to_db(detected_class, confidence, img_pil):
    # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Base64
    buffered = BytesIO()
    img_pil.save(buffered, format="JPEG")
    img_str = base64.b64encode(buffered.getvalue()).decode()

    # –ó–∞–ø–∏—Å—å –≤ –ë–î
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("""
        INSERT INTO detections (detected_class, confidence, detection_datetime, image_base64)
        VALUES (?, ?, ?, ?)
    """, (detected_class, confidence, datetime.datetime.now().isoformat(), img_str))

    conn.commit()
    conn.close()

# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
# –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
uploaded_file = st.file_uploader(
    "üì§ –ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
    type=["jpg", "jpeg", "png"]
)


if uploaded_file:
    img = Image.open(uploaded_file).convert("RGB")
    st.image(img, caption="–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", use_container_width=True)

    if st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –¥–µ—Ç–µ–∫—Ü–∏—é"):
        with st.spinner("–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ..."):
            with tempfile.NamedTemporaryFile(delete=False, suffix=".jpg") as tmp:
                img.save(tmp.name)
                results = model(tmp.name, conf=conf_threshold)[0]
                annotated = results.plot()
            os.remove(tmp.name)

        annotated_rgb = cv2.cvtColor(annotated, cv2.COLOR_BGR2RGB)
        annotated_pil = Image.fromarray(annotated_rgb)

        st.image(annotated_rgb, caption=f"–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ—Ç–µ–∫—Ü–∏–∏ ({model_option})", use_container_width=True)

        st.subheader("üìã –î–µ—Ç–µ–∫—Ü–∏–∏:")
        for box in results.boxes:
            cls_id = int(box.cls[0])
            conf = float(box.conf[0])
            if conf >= conf_threshold:
                label = results.names.get(cls_id, f"Class {cls_id}")
                st.write(f"- {label} (ID: {cls_id}): {conf:.2%}")

                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –±–∞–∑—É –∫–∞–∂–¥—É—é –¥–µ—Ç–µ–∫—Ü–∏—é –≤–º–µ—Å—Ç–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
                save_detection_to_db(label, conf, annotated_pil)

        st.success("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!")


