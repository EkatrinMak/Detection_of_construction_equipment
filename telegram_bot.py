import telebot
import sqlite3
import base64
from io import BytesIO
from telebot import types
from datetime import datetime

TOKEN = '8179859032:AAFNqIcy7HKUK7xWg6b-NO3Y3mkz5cVkLo4'
bot = telebot.TeleBot(TOKEN)

DB_PATH = 'detections.db'

# –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("–ù–∞—á–∞—Ç—å"))
    bot.send_message(message.chat.id, "–ù–∞–∂–º–∏—Ç–µ '–ù–∞—á–∞—Ç—å' –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–µ–∫—Ü–∏–π.", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞—á–∞—Ç—å"
@bot.message_handler(func=lambda message: message.text == "–ù–∞—á–∞—Ç—å")
def choose_date(message):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()

    cursor.execute("SELECT DISTINCT date(detection_datetime) FROM detections")
    dates = cursor.fetchall()
    conn.close()

    if dates:
        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
        for date in dates:
            markup.add(types.KeyboardButton(date[0]))
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å, –∑–∞ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–µ—Ç–µ–∫—Ü–∏–∏:", reply_markup=markup)
    else:
        bot.send_message(message.chat.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–µ—Ç–µ–∫—Ü–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")

# –í—ã–±–æ—Ä –¥–∞—Ç—ã –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
@bot.message_handler(func=lambda message: validate_date(message.text))
def show_detections(message):
    selected_date = message.text
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()

    cursor.execute("""
        SELECT id, detected_class, confidence 
        FROM detections 
        WHERE date(detection_datetime) = ?
    """, (selected_date,))
    
    detections = cursor.fetchall()
    conn.close()

    if detections:
        response = f"üìÖ –î–µ—Ç–µ–∫—Ü–∏–∏ –∑–∞ {selected_date}:\n\n"
        for det in detections:
            response += f"üî∏ {det[1]} ‚Äî {det[2]*100:.2f}% (ID –∑–∞–ø–∏—Å–∏: {det[0]})\n"
        
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("–í—ã–≤–µ—Å—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–µ—Ç–µ–∫—Ü–∏–π", callback_data=f"image|{selected_date}"))
        markup.add(types.InlineKeyboardButton("–ù–∞—á–∞—Ç—å —Å –Ω–∞—á–∞–ª–∞", callback_data="restart"))

        bot.send_message(message.chat.id, response, reply_markup=markup)
    else:
        bot.send_message(message.chat.id, "–ó–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –¥–µ—Ç–µ–∫—Ü–∏–π –Ω–µ—Ç.")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã
def validate_date(date_text):
    try:
        datetime.strptime(date_text, '%Y-%m-%d')
        return True
    except ValueError:
        return False

# –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∫–Ω–æ–ø–æ–∫
@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    if call.data.startswith("image|"):
        selected_date = call.data.split("|")[1]
        
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
        cursor.execute("""
            SELECT image_base64 FROM detections 
            WHERE date(detection_datetime) = ? AND image_base64 IS NOT NULL
        """, (selected_date,))

        images = cursor.fetchall()
        conn.close()

        if images:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            unique_images = set()
            
            for img_str in images:
                if img_str[0]:  # –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ
                    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–æ (–¥—É–±–ª–∏–∫–∞—Ç—ã –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω—ã)
                    unique_images.add(img_str[0])
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            for img_str in unique_images:
                try:
                    img_bytes = base64.b64decode(img_str)
                    bot.send_photo(call.message.chat.id, photo=BytesIO(img_bytes))
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
                    continue
            
            bot.send_message(call.message.chat.id, f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(unique_images)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.")
        else:
            bot.send_message(call.message.chat.id, "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –Ω–µ—Ç.")
        
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("–ù–∞—á–∞—Ç—å —Å –Ω–∞—á–∞–ª–∞", callback_data="restart"))
        bot.send_message(call.message.chat.id, "‚úÖ –ì–æ—Ç–æ–≤–æ!", reply_markup=markup)

    elif call.data == "restart":
        start(call.message)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.polling(none_stop=True)
